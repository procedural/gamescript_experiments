import func Foundation.strdup
import sokol_gfx

func _strdup(_ cstring: UnsafePointer<CChar>) -> UnsafePointer<CChar>? {
  return UnsafePointer<CChar>(strdup(cstring))
}

func getFrame0Cache() -> Bool {
  return pointerGetBool(pointerTo8BitBools: globalArrayPersistentNew8Bit(label: "__frame0Cache", count: 1), index: 0)
}

func setFrame0Cache(_ value: Bool) {
  pointerSetBool(pointerTo8BitBools: globalArrayPersistentNew8Bit(label: "__frame0Cache", count: 1), index: 0, value: value)
}

@_cdecl("frame") public func frame() {

if (getCurrentFrame() == 0 || getFrame0Cache() == false) {
  setFrame0Cache(true)

  var sgDesc = sg_desc()
  sg_setup(&sgDesc)

  let vsEntry = "main"
  let psEntry = "main"

  let vsSource = "#version 330 core" +
"\n #if 1" +
"\n out vec4 position;" +
"\n " +
"\n void main() {" +
"\n   position = vec4(gl_VertexID == 1 ? 3 : -1, gl_VertexID == 2 ? 3 : -1, 0.5, 1);" +
"\n   gl_Position = position;" +
"\n }" +
"\n #endif" +
"\n " +
"\n #if 0" +
"\n in vec4 position;" +
"\n " +
"\n layout(location = 0) out vec4 color;" +
"\n " +
"\n void main() {" +
"\n   float W = 1920.0;" +
"\n   float H = 1080.0;" +
"\n   float U = position.x;" +
"\n   float V = position.y;" +
"\n   vec4 C = vec4(0, 1, 0, 1);" +
"\n " +
"\n   vec2 z = vec2(0, 0);" +
"\n   vec2 c = vec2(0, 0);" +
"\n   float aspect = W / H;" +
"\n   c.x = (U - 0.5) * aspect;" +
"\n   c.y = V;" +
"\n   int i = 0, iter = 100;" +
"\n   z = c;" +
"\n   for (i = 0; i < iter; i += 1) {" +
"\n     float x = (z.x * z.x - z.y * z.y) + c.x;" +
"\n     float y = (z.y * z.x + z.x * z.y) + c.y;" +
"\n     if ((x * x + y * y) > 4.0)" +
"\n       break;" +
"\n     z.x = x;" +
"\n     z.y = y;" +
"\n   }" +
"\n " +
"\n   C.g = (i == iter ? 0.0 : float(i)) / 50.0;" +
"\n " +
"\n   color = C;" +
"\n }" +
"\n #endif" +
"\n"

  let psSource = "#version 330 core" +
"\n #if 0" +
"\n out vec4 position;" +
"\n " +
"\n void main() {" +
"\n   position = vec4(gl_VertexID == 1 ? 3 : -1, gl_VertexID == 2 ? 3 : -1, 0.5, 1);" +
"\n   gl_Position = position;" +
"\n }" +
"\n #endif" +
"\n " +
"\n #if 1" +
"\n in vec4 position;" +
"\n " +
"\n layout(location = 0) out vec4 color;" +
"\n " +
"\n void main() {" +
"\n   float W = 1920.0;" +
"\n   float H = 1080.0;" +
"\n   float U = position.x;" +
"\n   float V = position.y;" +
"\n   vec4 C = vec4(0, 1, 0, 1);" +
"\n " +
"\n   vec2 z = vec2(0, 0);" +
"\n   vec2 c = vec2(0, 0);" +
"\n   float aspect = W / H;" +
"\n   c.x = (U - 0.5) * aspect;" +
"\n   c.y = V;" +
"\n   int i = 0, iter = 100;" +
"\n   z = c;" +
"\n   for (i = 0; i < iter; i += 1) {" +
"\n     float x = (z.x * z.x - z.y * z.y) + c.x;" +
"\n     float y = (z.y * z.x + z.x * z.y) + c.y;" +
"\n     if ((x * x + y * y) > 4.0)" +
"\n       break;" +
"\n     z.x = x;" +
"\n     z.y = y;" +
"\n   }" +
"\n " +
"\n   C.g = (i == iter ? 0.0 : float(i)) / 50.0;" +
"\n " +
"\n   color = C;" +
"\n }" +
"\n #endif" +
"\n"

  var sgShader = sg_shader_desc()
  sgShader.attrs.0.name      = _strdup("")
  sgShader.attrs.0.sem_name  = _strdup("POS")
  sgShader.attrs.0.sem_index = 0
  sgShader.vs.source         = _strdup(vsSource)
  sgShader.vs.entry          = _strdup(vsEntry)
  sgShader.fs.source         = _strdup(psSource)
  sgShader.fs.entry          = _strdup(psEntry)
  let shaderId = sg_make_shader(&sgShader)

  var sgPipeline = sg_pipeline_desc()
  sgPipeline.shader                      = shaderId
  sgPipeline.layout.attrs.0.buffer_index = 0
  sgPipeline.layout.attrs.0.offset       = 0
  sgPipeline.layout.attrs.0.format       = SG_VERTEXFORMAT_FLOAT3
  let pipelineId = sg_make_pipeline(&sgPipeline)

  let bufferData = globalArrayPersistentNew8Bit(label: "bufferData", count: 4 * 9)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 0, value:  0.0)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 1, value:  0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 2, value:  0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 3, value:  0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 4, value: -0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 5, value:  0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 6, value: -0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 7, value: -0.5)
  pointerSetNumber(pointerTo32BitFloats: bufferData, index: 8, value:  0.5)

  var sgBuffer = sg_buffer_desc()
  sgBuffer.data.ptr  = _gsVoidPointerFromNumber(bufferData)
  sgBuffer.data.size = 4 * 9
  let bufferId = sg_make_buffer(&sgBuffer)

  let sgIdsCount = 4
  if (Int(dynamicArrayGetSize(handle: globalDynamicArrayPersistentNew(label: "sgIds"))) < sgIdsCount) {
    globalDynamicArrayPersistentDelete(label: "sgIds")
    for _ in stride(from: 0, to: sgIdsCount, by: 1) {
      dynamicArrayAppend(handle: globalDynamicArrayPersistentNew(label: "sgIds"), value: 0)
    }
  }
  dynamicArraySet(handle: globalDynamicArrayPersistentNew(label: "sgIds"), index: 0, value: Number(shaderId.id))
  dynamicArraySet(handle: globalDynamicArrayPersistentNew(label: "sgIds"), index: 1, value: Number(pipelineId.id))
  dynamicArraySet(handle: globalDynamicArrayPersistentNew(label: "sgIds"), index: 2, value: Number(bufferId.id))
}

if (getCurrentFrame() > 0) {
  sg_reset_state_cache()
}

var sgPass = sg_pass_action()
sgPass.colors.0.action  = SG_ACTION_CLEAR
sgPass.colors.0.value.r = 1
sgPass.colors.0.value.g = 1
sgPass.colors.0.value.b = 0
sgPass.colors.0.value.a = 1
sg_begin_default_pass(&sgPass, Int32(windowGetWidth()), Int32(windowGetHeight()))

var pipelineId = sg_pipeline()
pipelineId.id = UInt32(dynamicArrayGet(handle: globalDynamicArrayPersistentNew(label: "sgIds"), index: 1))
sg_apply_pipeline(pipelineId)

var bufferId = sg_buffer()
bufferId.id = UInt32(dynamicArrayGet(handle: globalDynamicArrayPersistentNew(label: "sgIds"), index: 2))
var bindings = sg_bindings()
bindings.vertex_buffers.0        = bufferId
bindings.vertex_buffer_offsets.0 = 0
sg_apply_bindings(&bindings)

sg_draw(0, 3, 1)

sg_end_pass()
sg_commit()

}

